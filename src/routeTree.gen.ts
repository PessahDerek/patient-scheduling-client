/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LogoutImport } from './routes/logout'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'
import { Route as PatientLayoutImport } from './routes/patient/_layout'
import { Route as DocsLayoutImport } from './routes/docs/_layout'
import { Route as AuthActionImport } from './routes/auth.$action'
import { Route as PatientLayoutIndexImport } from './routes/patient/_layout/index'
import { Route as DocsLayoutIndexImport } from './routes/docs/_layout/index'
import { Route as PatientLayoutProfileImport } from './routes/patient/_layout/profile'
import { Route as PatientLayoutAppointmentsImport } from './routes/patient/_layout/appointments'

// Create Virtual Routes

const PatientImport = createFileRoute('/patient')()
const DocsImport = createFileRoute('/docs')()

// Create/Update Routes

const PatientRoute = PatientImport.update({
  id: '/patient',
  path: '/patient',
  getParentRoute: () => rootRoute,
} as any)

const DocsRoute = DocsImport.update({
  id: '/docs',
  path: '/docs',
  getParentRoute: () => rootRoute,
} as any)

const LogoutRoute = LogoutImport.update({
  id: '/logout',
  path: '/logout',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PatientLayoutRoute = PatientLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => PatientRoute,
} as any)

const DocsLayoutRoute = DocsLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => DocsRoute,
} as any)

const AuthActionRoute = AuthActionImport.update({
  id: '/auth/$action',
  path: '/auth/$action',
  getParentRoute: () => rootRoute,
} as any)

const PatientLayoutIndexRoute = PatientLayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PatientLayoutRoute,
} as any)

const DocsLayoutIndexRoute = DocsLayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DocsLayoutRoute,
} as any)

const PatientLayoutProfileRoute = PatientLayoutProfileImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => PatientLayoutRoute,
} as any)

const PatientLayoutAppointmentsRoute = PatientLayoutAppointmentsImport.update({
  id: '/appointments',
  path: '/appointments',
  getParentRoute: () => PatientLayoutRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/logout': {
      id: '/logout'
      path: '/logout'
      fullPath: '/logout'
      preLoaderRoute: typeof LogoutImport
      parentRoute: typeof rootRoute
    }
    '/auth/$action': {
      id: '/auth/$action'
      path: '/auth/$action'
      fullPath: '/auth/$action'
      preLoaderRoute: typeof AuthActionImport
      parentRoute: typeof rootRoute
    }
    '/docs': {
      id: '/docs'
      path: '/docs'
      fullPath: '/docs'
      preLoaderRoute: typeof DocsImport
      parentRoute: typeof rootRoute
    }
    '/docs/_layout': {
      id: '/docs/_layout'
      path: '/docs'
      fullPath: '/docs'
      preLoaderRoute: typeof DocsLayoutImport
      parentRoute: typeof DocsRoute
    }
    '/patient': {
      id: '/patient'
      path: '/patient'
      fullPath: '/patient'
      preLoaderRoute: typeof PatientImport
      parentRoute: typeof rootRoute
    }
    '/patient/_layout': {
      id: '/patient/_layout'
      path: '/patient'
      fullPath: '/patient'
      preLoaderRoute: typeof PatientLayoutImport
      parentRoute: typeof PatientRoute
    }
    '/patient/_layout/appointments': {
      id: '/patient/_layout/appointments'
      path: '/appointments'
      fullPath: '/patient/appointments'
      preLoaderRoute: typeof PatientLayoutAppointmentsImport
      parentRoute: typeof PatientLayoutImport
    }
    '/patient/_layout/profile': {
      id: '/patient/_layout/profile'
      path: '/profile'
      fullPath: '/patient/profile'
      preLoaderRoute: typeof PatientLayoutProfileImport
      parentRoute: typeof PatientLayoutImport
    }
    '/docs/_layout/': {
      id: '/docs/_layout/'
      path: '/'
      fullPath: '/docs/'
      preLoaderRoute: typeof DocsLayoutIndexImport
      parentRoute: typeof DocsLayoutImport
    }
    '/patient/_layout/': {
      id: '/patient/_layout/'
      path: '/'
      fullPath: '/patient/'
      preLoaderRoute: typeof PatientLayoutIndexImport
      parentRoute: typeof PatientLayoutImport
    }
  }
}

// Create and export the route tree

interface DocsLayoutRouteChildren {
  DocsLayoutIndexRoute: typeof DocsLayoutIndexRoute
}

const DocsLayoutRouteChildren: DocsLayoutRouteChildren = {
  DocsLayoutIndexRoute: DocsLayoutIndexRoute,
}

const DocsLayoutRouteWithChildren = DocsLayoutRoute._addFileChildren(
  DocsLayoutRouteChildren,
)

interface DocsRouteChildren {
  DocsLayoutRoute: typeof DocsLayoutRouteWithChildren
}

const DocsRouteChildren: DocsRouteChildren = {
  DocsLayoutRoute: DocsLayoutRouteWithChildren,
}

const DocsRouteWithChildren = DocsRoute._addFileChildren(DocsRouteChildren)

interface PatientLayoutRouteChildren {
  PatientLayoutAppointmentsRoute: typeof PatientLayoutAppointmentsRoute
  PatientLayoutProfileRoute: typeof PatientLayoutProfileRoute
  PatientLayoutIndexRoute: typeof PatientLayoutIndexRoute
}

const PatientLayoutRouteChildren: PatientLayoutRouteChildren = {
  PatientLayoutAppointmentsRoute: PatientLayoutAppointmentsRoute,
  PatientLayoutProfileRoute: PatientLayoutProfileRoute,
  PatientLayoutIndexRoute: PatientLayoutIndexRoute,
}

const PatientLayoutRouteWithChildren = PatientLayoutRoute._addFileChildren(
  PatientLayoutRouteChildren,
)

interface PatientRouteChildren {
  PatientLayoutRoute: typeof PatientLayoutRouteWithChildren
}

const PatientRouteChildren: PatientRouteChildren = {
  PatientLayoutRoute: PatientLayoutRouteWithChildren,
}

const PatientRouteWithChildren =
  PatientRoute._addFileChildren(PatientRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/logout': typeof LogoutRoute
  '/auth/$action': typeof AuthActionRoute
  '/docs': typeof DocsLayoutRouteWithChildren
  '/patient': typeof PatientLayoutRouteWithChildren
  '/patient/appointments': typeof PatientLayoutAppointmentsRoute
  '/patient/profile': typeof PatientLayoutProfileRoute
  '/docs/': typeof DocsLayoutIndexRoute
  '/patient/': typeof PatientLayoutIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/logout': typeof LogoutRoute
  '/auth/$action': typeof AuthActionRoute
  '/docs': typeof DocsLayoutIndexRoute
  '/patient': typeof PatientLayoutIndexRoute
  '/patient/appointments': typeof PatientLayoutAppointmentsRoute
  '/patient/profile': typeof PatientLayoutProfileRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/logout': typeof LogoutRoute
  '/auth/$action': typeof AuthActionRoute
  '/docs': typeof DocsRouteWithChildren
  '/docs/_layout': typeof DocsLayoutRouteWithChildren
  '/patient': typeof PatientRouteWithChildren
  '/patient/_layout': typeof PatientLayoutRouteWithChildren
  '/patient/_layout/appointments': typeof PatientLayoutAppointmentsRoute
  '/patient/_layout/profile': typeof PatientLayoutProfileRoute
  '/docs/_layout/': typeof DocsLayoutIndexRoute
  '/patient/_layout/': typeof PatientLayoutIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/logout'
    | '/auth/$action'
    | '/docs'
    | '/patient'
    | '/patient/appointments'
    | '/patient/profile'
    | '/docs/'
    | '/patient/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/logout'
    | '/auth/$action'
    | '/docs'
    | '/patient'
    | '/patient/appointments'
    | '/patient/profile'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/logout'
    | '/auth/$action'
    | '/docs'
    | '/docs/_layout'
    | '/patient'
    | '/patient/_layout'
    | '/patient/_layout/appointments'
    | '/patient/_layout/profile'
    | '/docs/_layout/'
    | '/patient/_layout/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  LogoutRoute: typeof LogoutRoute
  AuthActionRoute: typeof AuthActionRoute
  DocsRoute: typeof DocsRouteWithChildren
  PatientRoute: typeof PatientRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  LogoutRoute: LogoutRoute,
  AuthActionRoute: AuthActionRoute,
  DocsRoute: DocsRouteWithChildren,
  PatientRoute: PatientRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/logout",
        "/auth/$action",
        "/docs",
        "/patient"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/logout": {
      "filePath": "logout.tsx"
    },
    "/auth/$action": {
      "filePath": "auth.$action.tsx"
    },
    "/docs": {
      "filePath": "docs",
      "children": [
        "/docs/_layout"
      ]
    },
    "/docs/_layout": {
      "filePath": "docs/_layout.tsx",
      "parent": "/docs",
      "children": [
        "/docs/_layout/"
      ]
    },
    "/patient": {
      "filePath": "patient",
      "children": [
        "/patient/_layout"
      ]
    },
    "/patient/_layout": {
      "filePath": "patient/_layout.tsx",
      "parent": "/patient",
      "children": [
        "/patient/_layout/appointments",
        "/patient/_layout/profile",
        "/patient/_layout/"
      ]
    },
    "/patient/_layout/appointments": {
      "filePath": "patient/_layout/appointments.tsx",
      "parent": "/patient/_layout"
    },
    "/patient/_layout/profile": {
      "filePath": "patient/_layout/profile.tsx",
      "parent": "/patient/_layout"
    },
    "/docs/_layout/": {
      "filePath": "docs/_layout/index.tsx",
      "parent": "/docs/_layout"
    },
    "/patient/_layout/": {
      "filePath": "patient/_layout/index.tsx",
      "parent": "/patient/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
